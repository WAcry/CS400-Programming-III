p3b CONCLUSIONS.TXT

Complete p3b and answer the following questions using results of running JDK Mission Control to justify your conclusions..

1) What can you tell about the performance of your hash table implementation compared to Java's tree map? 
Explain why (or when) your hash table is better or worse than Java's Tree Map.

Based on Java Application Analysis, I could say that my hash table implementation has a better
performance on insertions and retrieves if given a proper size. This is because when hashtable 
has a big enough prime size, it's complexity for get and inserts is nearly O(1) (even though there will 
be a few times of resize()), which is better than treemap's O(log N) complexity.



2) What did you observe in jdk mission control to come to the conclusion above?

I noticed that for get() methods, hashtable is much better than treemap. And for insertions,
hashtable still does better than treemap, but the difference is not that big. Anyway, hashtable has a
better performance for both get() and insert().



3) SCREENSHOT_001.PNG NOTES: Briefly describe what this image 001 shows

SCREENSHOT_001.PNG: This screenshot shows that overall hashtable has a better performance 
(less CPU cycles) in both retrieves and insertions.

4) SCREENSHOT_002.PNG NOTES: Briefly describe what this image 002 shows

SCREENSHOT_002.PNG: This screenshot shows that for "memory usage", hashtable has a lower memory
usage than treemap for  insertions and retrieves.

5) Describe other screenshots if you include them in your submission.
SCREENSHOT_003.PNG: This screenshot shows that for "method polling", hashtable has a much better
performance (less CPU cycles) than treemap for both insertions and retrieves.
